(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{714:function(e,t,o){"use strict";o.r(t);var s=o(1),i=Object(s.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"blockchain-reactor-v0-modules"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#blockchain-reactor-v0-modules"}},[e._v("#")]),e._v(" Blockchain Reactor v0 Modules")]),e._v(" "),o("h3",{attrs:{id:"blockchain-reactor"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#blockchain-reactor"}},[e._v("#")]),e._v(" Blockchain Reactor")]),e._v(" "),o("ul",[o("li",[e._v("coordinates the pool for syncing")]),e._v(" "),o("li",[e._v("coordinates the store for persistence")]),e._v(" "),o("li",[e._v("coordinates the playing of blocks towards the app using a sm.BlockExecutor")]),e._v(" "),o("li",[e._v("handles switching between fastsync and consensus")]),e._v(" "),o("li",[e._v("it is a p2p.BaseReactor")]),e._v(" "),o("li",[e._v("starts the pool.Start() and its poolRoutine()")]),e._v(" "),o("li",[e._v("registers all the concrete types and interfaces for serialisation")])]),e._v(" "),o("h4",{attrs:{id:"poolroutine"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#poolroutine"}},[e._v("#")]),e._v(" poolRoutine")]),e._v(" "),o("ul",[o("li",[e._v("listens to these channels:\n"),o("ul",[o("li",[e._v("pool requests blocks from a specific peer by posting to requestsCh, block reactor then sends\na &bcBlockRequestMessage for a specific height")]),e._v(" "),o("li",[e._v("pool signals timeout of a specific peer by posting to timeoutsCh")]),e._v(" "),o("li",[e._v("switchToConsensusTicker to periodically try and switch to consensus")]),e._v(" "),o("li",[e._v("trySyncTicker to periodically check if we have fallen behind and then catch-up sync\n"),o("ul",[o("li",[e._v("if there aren't any new blocks available on the pool it skips syncing")])])])])]),e._v(" "),o("li",[e._v("tries to sync the app by taking downloaded blocks from the pool, gives them to the app and stores\nthem on disk")]),e._v(" "),o("li",[e._v("implements Receive which is called by the switch/peer\n"),o("ul",[o("li",[e._v("calls AddBlock on the pool when it receives a new block from a peer")])])])]),e._v(" "),o("h3",{attrs:{id:"block-pool"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#block-pool"}},[e._v("#")]),e._v(" Block Pool")]),e._v(" "),o("ul",[o("li",[e._v("responsible for downloading blocks from peers")]),e._v(" "),o("li",[e._v("makeRequestersRoutine()\n"),o("ul",[o("li",[e._v("removes timeout peers")]),e._v(" "),o("li",[e._v("starts new requesters by calling makeNextRequester()")])])]),e._v(" "),o("li",[e._v("requestRoutine():\n"),o("ul",[o("li",[e._v("picks a peer and sends the request, then blocks until:\n"),o("ul",[o("li",[e._v("pool is stopped by listening to pool.Quit")]),e._v(" "),o("li",[e._v("requester is stopped by listening to Quit")]),e._v(" "),o("li",[e._v("request is redone")]),e._v(" "),o("li",[e._v("we receive a block\n"),o("ul",[o("li",[e._v("gotBlockCh is strange")])])])])])])])]),e._v(" "),o("h3",{attrs:{id:"go-routines-in-blockchain-reactor"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#go-routines-in-blockchain-reactor"}},[e._v("#")]),e._v(" Go Routines in Blockchain Reactor")]),e._v(" "),o("p",[o("img",{attrs:{src:"img/bc-reactor-routines.png",alt:"Go Routines Diagram"}})])])}),[],!1,null,null,null);t.default=i.exports}}]);